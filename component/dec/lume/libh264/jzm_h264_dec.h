/****************************************************************
	JZMedia VPU H.264 decoder header file
	<pwang@ingenic.cn>
	copyright (c) 2012 Ingenic
*****************************************************************/

#ifndef _JZM_H264_API_H_
#define _JZM_H264_API_H_

/*-------------- vmem def --------------*/
#define VRAM_TCSM1_BASE (0x132C0000)
#define VRAM_SRAM_BASE  (0x132F0000)
#define DESP_FIFO_WIDTH 3
#define DESP_FIFO_DEPTH (1 << DESP_FIFO_WIDTH)
#define VRAM_SCH_FIFO_DEPTH DESP_FIFO_DEPTH
#define TOP_NEI_ADDR (VRAM_TCSM1_BASE)
#define TOP_NEI_SIZE (128*16*4)
#define MC_DESP_ADDR (TOP_NEI_ADDR + TOP_NEI_SIZE)
#define MC_DESP_ONE_SIZE (128*4)
#define MC_DESP_SIZE (MC_DESP_ONE_SIZE*DESP_FIFO_DEPTH)
#define DBLK_MV_ADDR (MC_DESP_ADDR + MC_DESP_SIZE)
#define DBLK_MV_ONE_SIZE (64*4)
#define DBLK_MV_SIZE (DBLK_MV_ONE_SIZE*DESP_FIFO_DEPTH)
#define VMAU_DESP_ADDR (DBLK_MV_ADDR + DBLK_MV_SIZE)
#define VMAU_DESP_ONE_SIZE (16*4)
#define VMAU_DESP_SIZE (VMAU_DESP_ONE_SIZE*DESP_FIFO_DEPTH)
#define DBLK_DESP_ADDR (VMAU_DESP_ADDR + VMAU_DESP_SIZE)
#define DBLK_DESP_ONE_SIZE (8*4)
#define DBLK_DESP_SIZE (DBLK_DESP_ONE_SIZE*DESP_FIFO_DEPTH)
#define MOTION_IWTA_BASE ((DBLK_DESP_ADDR+DBLK_DESP_SIZE + 1024) & (~3))
#define MOTION_IWTA_SIZE (2048)
#define MOTION_DSA_BASE (MOTION_IWTA_BASE + MOTION_IWTA_SIZE)
#define MAU_ENDF_BASE (MOTION_DSA_BASE+4)//(MAU_SRC_BASE + MAU_SRC_SIZE)
#define DBLK_ENDF_BASE ( MAU_ENDF_BASE + 4 )
#define DBLK_GP_ENDF_BASE ( DBLK_ENDF_BASE + 4 )
#define TCSM1_END (MAU_SRC_BASE+MAU_SRC_SIZE)
#define RESIDUAL_DOUT_ADDR (VRAM_SRAM_BASE)
#define RESIDUAL_DOUT_ONE_SIZE (256*4)
#define RESIDUAL_DOUT_SIZE (RESIDUAL_DOUT_ONE_SIZE*DESP_FIFO_DEPTH)
#define SRAM_END (RESIDUAL_DOUT_ADDR+RESIDUAL_DOUT_SIZE)
#define PMON_BUF (SRAM_END)

/*----------------------------*/
#define JZM_H264_I_TYPE 1
#define JZM_H264_P_TYPE 2
#define JZM_H264_B_TYPE 4

#define ROA_ALN     256
#define DOUT_Y_STRD 16
#define DOUT_C_STRD 8

typedef struct JZM_H264{
    unsigned short start_mb_x;   //
    unsigned short start_mb_y;//
    unsigned short mb_width;  //
    unsigned short mb_height;//   
    unsigned char slice_num;    //8
    unsigned char slice_type;  //9
    unsigned char qscale;   //                    /* s->qscale */
    unsigned char field_picture;  //
    unsigned char cabac;   //                     /* h->pps.cabac */
    unsigned char transform_8x8_mode;    //       /* !!h->pps.transform_8x8_mode */
    unsigned char constrained_intra_pred;    //   /* !!h->pps.constrained_intra_pred */
    unsigned char direct_8x8_inference_flag; //   /* !!h->pps.direct_8x8_inference_flag ? @@@ sps  */     
    unsigned char direct_spatial_mv_pred;  //16     /* !!h->direct_spatial_mv_pred */
    unsigned char ref_count_0;     // 17            /* h->ref_count[0] */
    unsigned char ref_count_1;         // 18        /* h->ref_count[1] */
    unsigned char deblocking_filter;        //19     /* !!h->deblocking_filter */20
    int dblk_left_en;//20
    int dblk_top_en;
    int x264_build;                   /* h->x264_build */
    int slice_alpha_c0_offset; //
    int slice_beta_offset;//      
    unsigned int bs_buffer;   //  40ch     /* s->gb.buffer */
    unsigned int bs_index;        //44ch    /* s->gb.index */

    unsigned int bs_size_in_bits;     // 48ch     /* s->gb.index?@@@ s->gb.size_in_bits */
    int cabac_init_idc;//   52ch
    int * curr_frm_slice_start_mb;// 56ch
    int * ref_frm_slice_start_mb;//  60ch
    unsigned int ref_frm_ctrl; //    64ch
    unsigned int ref_frm_mv;//        68ch
    unsigned int curr_frm_ctrl;   //     72ch
    unsigned int curr_frm_mv;//              76ch
    unsigned int dir_scale_table[16];  //    80ch
    unsigned int chroma_qp_table[128];   //    144 ch
    unsigned char scaling_matrix8[2][64]; //    656ch
    unsigned char scaling_matrix4[6][16];//  784ch
    unsigned int tlb_phy_addr;//   880ch
    unsigned int dec_result_y;//     884ch
    unsigned int dec_result_uv;         //    888ch
    unsigned int mc_ref_y[2][16];           // 892 ch
    unsigned int mc_ref_c[2][16];         //   1020 ch
    unsigned int luma_weight[2][16];   //      1148 ch  Q
    unsigned int luma_offset[2][16];     //    1276 ch  Q
    unsigned int chroma_weight[2][16][2]; //   1404 ch  Q
    unsigned int chroma_offset[2][16][2];  //  1660 ch
    unsigned char implicit_weight[16][16];  //  1916 ch
    unsigned int use_weight;             //     2172 ch
    unsigned int use_weight_chroma;          //  2176
    unsigned int luma_log2_weight_denom;    //   2180
    unsigned int chroma_log2_weight_denom;    //   2184
    int * des_va, * des_pa;    //   2188ch    2192ch
} jzm_h264;
//struct JZM_H264 st_h264;
//jzm_h264 st_h264;
int slice_num_sde;

unsigned lps_comb[128]={
  0xefcfaffe,0xefcfafff,0xe2c4a6fe,0xe2c4a6ff,0xd7ba9dfe,0xd7ba9dff,0xccb195f4,0xccb195f5,
  0xc2a88de6,0xc2a88de7,0xb89f86dc,0xb89f86dd,0xae977fd0,0xae977fd1,0xa58f79c6,0xa58f79c7,
  0x9d8873bc,0x9d8873bd,0x95816db2,0x95816db3,0x8d7a67a8,0x8d7a67a9,0x867462a0,0x867462a1,
  0x7f6e5d98,0x7f6e5d99,0x79685890,0x79685891,0x73635488,0x73635489,0x6d5e4f82,0x6d5e4f83,
  0x67594b7a,0x67594b7b,0x62554774,0x62554775,0x5d50446e,0x5d50446f,0x584c4068,0x584c4069,
  0x54483d64,0x54483d65,0x4f443a5e,0x4f443a5f,0x4b41375a,0x4b41375b,0x473e3454,0x473e3455,
  0x443a3150,0x443a3151,0x40372f4c,0x40372f4d,0x3d352c48,0x3d352c49,0x3a322a44,0x3a322a45,
  0x372f2840,0x372f2841,0x342d263e,0x342d263f,0x312a243a,0x312a243b,0x2f282238,0x2f282239,
  0x2c262034,0x2c262035,0x2a241e32,0x2a241e33,0x28221d2e,0x28221d2f,0x26201b2c,0x26201b2d,
  0x241f1a2a,0x241f1a2b,0x221d1928,0x221d1929,0x201c1726,0x201c1727,0x1e1a1624,0x1e1a1625,
  0x1d191522,0x1d191523,0x1b181420,0x1b181421,0x1a16131e,0x1a16131f,0x1815121c,0x1815121d,
  0x1714111a,0x1714111b,0x1613101a,0x1613101b,0x15120f18,0x15120f19,0x14110e16,0x14110e17,
  0x13100d16,0x13100d17,0x120f0d14,0x120f0d15,0x110e0c14,0x110e0c15,0x100e0b12,0x100e0b13,
  0xf0d0b12,0xf0d0b13,0xe0c0a10,0xe0c0a11,0xd0b0a10,0xd0b0a11,0xd0b090e,0xd0b090f,0xc0a080e,
  0xc0a080f,0xb0a080c,0xb0a080d,0xb09080c,0xb09080d,0xa09070c,0xa09070d,0xa08070a,0xa08070b,
  0x908060a,0x908060b,0x807060a,0x807060b,0x1010102,0x1010103
};

typedef struct SDE_VLC_STA
{
  int ram_ofst;
  int size;
  int lvl0_len;
};
struct SDE_VLC_STA sde_vlc2_sta[7] = {
  {0  , 128, 6}, // vlc_tables_coeff_token_table_0
  {128, 116, 5}, // vlc_tables_coeff_token_table_1
  {256, 104, 6}, // vlc_tables_coeff_token_table_2
  {384,  64, 6}, // vlc_tables_coeff_token_table_3
  {512,  70, 6}, // vlc_tables_chroma_dc_coeff_token_table
  {640,  74, 6}, // vlc_tables_total_zeros_table_0
  {768,  96, 6}, // vlc_tables_run7_table
};
unsigned short sde_vlc2_table[7][128]={
  { // 0
    0xa020, 0x887c, 0x806c, 0x200f, 0x100a, 0x100a, 0x100a, 0x100a, 
    0x0805, 0x0805, 0x0805, 0x0805, 0x0805, 0x0805, 0x0805, 0x0805, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, // 32
    0xa040, 0x9070, 0x8078, 0x807a, 0x2023, 0x201a, 0x2015, 0x2010, 
    0x181f, 0x181f, 0x1816, 0x1816, 0x1811, 0x1811, 0x180c, 0x180c, 
    0x101b, 0x101b, 0x101b, 0x101b, 0x1012, 0x1012, 0x1012, 0x1012, 
    0x100d, 0x100d, 0x100d, 0x100d, 0x1008, 0x1008, 0x1008, 0x1008, // 64
    0x4001, 0x2035, 0x8060, 0x8062, 0x8064, 0x8066, 0x8068, 0x806a, 
    0x203b, 0x2036, 0x2031, 0x2030, 0x2037, 0x2032, 0x202d, 0x202c, 
    0x1833, 0x1833, 0x182e, 0x182e, 0x1829, 0x1829, 0x1828, 0x1828, 
    0x182f, 0x182f, 0x182a, 0x182a, 0x1825, 0x1825, 0x1824, 0x1824, // 96
    0x0040, 0x0042, 0x0041, 0x003c, 0x0043, 0x003e, 0x003d, 0x0038, // 104
    0x003f, 0x003a, 0x0039, 0x0034, 0x0009, 0x0004, 0x4000, 0x4000, // 112
    0x1020, 0x1026, 0x1021, 0x101c, 0x102b, 0x1022, 0x101d, 0x1018, // 120
    0x0027, 0x001e, 0x0019, 0x0014, 0x0817, 0x080e, 0x0013, 0x0013, // 128
  },
  { // 1
    0xa020, 0x8868, 0x806c, 0x806e, 0x8070, 0x8072, 0x2017, 0x2009, 
    0x1813, 0x1813, 0x180f, 0x180f, 0x100a, 0x100a, 0x100a, 0x100a, 
    0x0805, 0x0805, 0x0805, 0x0805, 0x0805, 0x0805, 0x0805, 0x0805, 
    0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 
    0x9840, 0x9050, 0x8858, 0x885c, 0x8060, 0x8062, 0x8064, 0x8066, 
    0x1827, 0x1827, 0x181e, 0x181e, 0x181d, 0x181d, 0x1818, 0x1818, 
    0x1014, 0x1014, 0x1014, 0x1014, 0x101a, 0x101a, 0x101a, 0x101a, 
    0x1019, 0x1019, 0x1019, 0x1019, 0x1010, 0x1010, 0x1010, 0x1010, 
    0x4001, 0x4001, 0x103f, 0x103f, 0x1843, 0x1842, 0x1841, 0x1840, 
    0x183d, 0x183c, 0x183e, 0x1839, 0x103a, 0x103a, 0x1038, 0x1038, 
    0x103b, 0x1036, 0x1035, 0x1034, 0x1037, 0x1032, 0x1031, 0x1030, 
    0x082c, 0x082e, 0x082d, 0x0828, 0x0833, 0x082a, 0x0829, 0x0824, 
    0x002f, 0x0026, 0x0025, 0x0020, 0x002b, 0x0022, 0x0021, 0x001c, 
    0x0823, 0x0816, 0x0815, 0x080c, 0x001f, 0x0012, 0x0011, 0x0008, 
    0x001b, 0x000e, 0x000d, 0x0004, 
  },
  { // 2
    0x9840, 0x9050, 0x8858, 0x885c, 0x8060, 0x8062, 0x8064, 0x8066, 
    0x280c, 0x281e, 0x281d, 0x2808, 0x2827, 0x281a, 0x2819, 0x2804, 
    0x2015, 0x2015, 0x2016, 0x2016, 0x2011, 0x2011, 0x2012, 0x2012, 
    0x200d, 0x200d, 0x2023, 0x2023, 0x200e, 0x200e, 0x2009, 0x2009, 
    0x181f, 0x181f, 0x181f, 0x181f, 0x181b, 0x181b, 0x181b, 0x181b, 
    0x1817, 0x1817, 0x1817, 0x1817, 0x1813, 0x1813, 0x1813, 0x1813, 
    0x180f, 0x180f, 0x180f, 0x180f, 0x180a, 0x180a, 0x180a, 0x180a, 
    0x1805, 0x1805, 0x1805, 0x1805, 0x1800, 0x1800, 0x1800, 0x1800, 
    0x4001, 0x1840, 0x1843, 0x1842, 0x1841, 0x183c, 0x183f, 0x183e, 
    0x183d, 0x1838, 0x183b, 0x183a, 0x1839, 0x1834, 0x1035, 0x1035, 
    0x1030, 0x1036, 0x1031, 0x102c, 0x1037, 0x1032, 0x102d, 0x1028, 
    0x0833, 0x082e, 0x0829, 0x0824, 0x082f, 0x082a, 0x0825, 0x0820, 
    0x001c, 0x0018, 0x0026, 0x0014, 0x002b, 0x0022, 0x0021, 0x0010, 
  },
  { // 3
    0x2804, 0x2805, 0x4001, 0x2800, 0x2808, 0x2809, 0x280a, 0x4001, 
    0x280c, 0x280d, 0x280e, 0x280f, 0x2810, 0x2811, 0x2812, 0x2813, 
    0x2814, 0x2815, 0x2816, 0x2817, 0x2818, 0x2819, 0x281a, 0x281b, 
    0x281c, 0x281d, 0x281e, 0x281f, 0x2820, 0x2821, 0x2822, 0x2823, 
    0x2824, 0x2825, 0x2826, 0x2827, 0x2828, 0x2829, 0x282a, 0x282b, 
    0x282c, 0x282d, 0x282e, 0x282f, 0x2830, 0x2831, 0x2832, 0x2833, 
    0x2834, 0x2835, 0x2836, 0x2837, 0x2838, 0x2839, 0x283a, 0x283b, 
    0x283c, 0x283d, 0x283e, 0x283f, 0x2840, 0x2841, 0x2842, 0x2843, 
  },
  { // 4
    0x8840, 0x8044, 0x2810, 0x280c, 0x2808, 0x280f, 0x2809, 0x2804, 
    0x100a, 0x100a, 0x100a, 0x100a, 0x100a, 0x100a, 0x100a, 0x100a, 
    0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 
    0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 
    0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 
    0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 
    0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 
    0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 
    0x0013, 0x0013, 0x0812, 0x0811, 0x000e, 0x000d, 
  },
  {
    0x9040, 0x8048, 0x2808, 0x2807, 0x2006, 0x2006, 0x2005, 0x2005, 
    0x1804, 0x1804, 0x1804, 0x1804, 0x1803, 0x1803, 0x1803, 0x1803, 
    0x1002, 0x1002, 0x1002, 0x1002, 0x1002, 0x1002, 0x1002, 0x1002, 
    0x1001, 0x1001, 0x1001, 0x1001, 0x1001, 0x1001, 0x1001, 0x1001, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x4001, 0x100f, 0x100e, 0x100d, 0x080c, 0x080c, 0x080b, 0x080b, 
    0x000a, 0x0009, 
  },
  {
    0xa040, 0x2809, 0x2008, 0x2008, 0x1807, 0x1807, 0x1807, 0x1807, 
    0x1006, 0x1006, 0x1006, 0x1006, 0x1006, 0x1006, 0x1006, 0x1006, 
    0x1005, 0x1005, 0x1005, 0x1005, 0x1005, 0x1005, 0x1005, 0x1005, 
    0x1004, 0x1004, 0x1004, 0x1004, 0x1004, 0x1004, 0x1004, 0x1004, 
    0x1003, 0x1003, 0x1003, 0x1003, 0x1003, 0x1003, 0x1003, 0x1003, 
    0x1002, 0x1002, 0x1002, 0x1002, 0x1002, 0x1002, 0x1002, 0x1002, 
    0x1001, 0x1001, 0x1001, 0x1001, 0x1001, 0x1001, 0x1001, 0x1001, 
    0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 
    0x4001, 0x200e, 0x180d, 0x180d, 0x100c, 0x100c, 0x100c, 0x100c, 
    0x080b, 0x080b, 0x080b, 0x080b, 0x080b, 0x080b, 0x080b, 0x080b, 
    0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 
    0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 
  },
};
#endif // _JZM_H264_API_H_
